name: verify
on:
  push:
    branches:
      - "main"
    paths:
      - '**.cpp'
      - '**.hpp'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      dropbox_token: ${{steps.set_dropbox_token.outputs.dropbox_token}}
    steps:
      - uses: actions/checkout@v4

      - name: Set up competitive-verifier
        uses: competitive-verifier/actions/setup@v2
        with:
          cache-pip: true
      
      - name: Download previous verify result
        run: |
          workflow_ids=$(gh run list --workflow verify --limit 10 --json databaseId -q '.[].databaseId')
          for workflow_id in $workflow_ids; do
            # Result-cacheアーティファクトを試してダウンロード（失敗しても続行）
            if gh run download $workflow_id --name "Result-cache" --dir ./.artifacts 2>&1; then
              if [ -f "./.artifacts/merge.json" ]; then
                mv ./.artifacts/merge.json ./.artifacts/previous.json
                exit 0
              fi
            fi
          done
          echo "No Result-cache artifact found in the recent verify runs."
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Decide verification target files
        run: |
          include_files=$(jq -r '.files | keys[]' ./.artifacts/previous.json)
          include_files_list=$(echo $include_files | tr '\n' ' ')
          echo "Running oj-resolve with include files: $include_files_list"
          echo "INCLUDE_FILES_LIST=$include_files_list" >> $GITHUB_ENV
      
      # Initialize your own environment for resolving.
      - name: oj-resolve
        uses: competitive-verifier/actions/oj-resolve@v2
        with:
          output-path: verify_files.json
          # Specify patterns
          include: ${{ env.INCLUDE_FILES_LIST }}
          exclude: test/Math/enumerate_primes/*
          # If you have config.toml
          config: .verify-helper/config.toml
      - name: parse-doxygen
        uses: competitive-verifier/actions/parse-doxygen@v2
        with:
          verify-files: verify_files.json

      - name: Upload verify_files.json
        uses: competitive-verifier/actions/upload-verify-artifact@v2
        with:
          file: verify_files.json

      - name: Check bundled
        id: test-bundled
        run: |
          echo "count=$(find .competitive-verifier/bundled/ -type f | wc -l)" >> $GITHUB_OUTPUT
      - name: Upload bundled
        uses: actions/upload-artifact@v4
        if: steps.test-bundled.outputs.count > 0
        with:
          name: Bundled-${{ runner.os }}
          path: .competitive-verifier/bundled
          retention-days: 1

      - name: Set dropbox token
        id: set_dropbox_token
        run: |
          DROPBOX_TOKEN=$( \
            curl https://api.dropbox.com/oauth2/token \
              -d grant_type=refresh_token \
              -d refresh_token=$DROPBOX_REFRESH_TOKEN \
              -u $DROPBOX_APP_KEY:$DROPBOX_APP_SECRET \
            | jq -r '.["access_token"]' \
          )
          echo "::add-mask::$DROPBOX_TOKEN"
          DROPBOX_TOKEN_ENC=$(echo "$DROPBOX_TOKEN" | openssl enc -aes256 -e -pbkdf2 -base64 -A -k '${{secrets.AES256_KEY}}')
          echo "dropbox_token=$DROPBOX_TOKEN_ENC" >> $GITHUB_OUTPUT
        env:
          DROPBOX_APP_KEY: ${{secrets.DROPBOX_APP_KEY}}
          DROPBOX_APP_SECRET: ${{secrets.DROPBOX_APP_SECRET}}
          DROPBOX_REFRESH_TOKEN: ${{secrets.DROPBOX_REFRESH_TOKEN}}

  verify:
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      SPLIT_SIZE: "20"
    strategy:
      matrix:
        # prettier-ignore
        index:
          ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09",
           "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"]
    steps:
      - uses: actions/checkout@v4

      - name: Recieve dropbox token
        run: |
          DROPBOX_TOKEN=$(echo "${{needs.setup.outputs.dropbox_token}}" | openssl enc -aes256 -d -pbkdf2 -base64 -A -k '${{secrets.AES256_KEY}}')
          echo "::add-mask::$DROPBOX_TOKEN"
          echo "DROPBOX_TOKEN=$DROPBOX_TOKEN" >> $GITHUB_ENV

      - name: Download verify_files.json
        uses: competitive-verifier/actions/download-verify-artifact@v2

      - name: Set up competitive-verifier
        uses: competitive-verifier/actions/setup@v2
        with:
          cache-pip: true

      - name: Update Submodules
        run: | 
          git submodule init
          git submodule update --remote

      - name: Verify
        uses: competitive-verifier/actions/verify@v2
        with:
          destination: ${{runner.temp}}/result.json
          split-size: ${{ env.SPLIT_SIZE }}
          split-index: ${{ matrix.index }}
          timeout: 1800
        env:
          YUKICODER_TOKEN: ${{secrets.YUKICODER_TOKEN}}

      - name: Upload result artifact
        uses: actions/upload-artifact@v4
        with:
          name: Result-${{ runner.os }}-${{ matrix.index }}
          path: ${{runner.temp}}/result.json
          retention-days: 1

  docs-and-check:
    runs-on: ubuntu-latest
    needs: [verify]
    outputs:
      upload-pages: ${{steps.upload-pages.outcome == 'success'}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2147483647
  
      - name: Download verify_files.json and all artifacts
        id: all-artifacts
        uses: competitive-verifier/actions/download-verify-artifact@v2
        with:
          download-all: true
          artifact-root: .artifacts/
  
      - name: Extract bundled
        shell: bash
        run: |
          rm -rf .competitive-verifier/bundled
          if test -d "$SRCDIR"; then
            mkdir -p .competitive-verifier/
            mv "$SRCDIR" .competitive-verifier/bundled
          else
            echo "$SRCDIR does not exist."
          fi
        env:
          SRCDIR: .artifacts/Bundled-${{ runner.os }}
  
      - name: Set up competitive-verifier
        uses: competitive-verifier/actions/setup@v2
        with:
          cache-pip: true

      - name: Bundle verification result
        shell: bash
        run: |
          ARTIFACTS_ROOT="${{ steps.all-artifacts.outputs.artifacts-root }}/Result-*"
          JSON_FILES=$(find $ARTIFACTS_ROOT -name "result.json")

          jq -s '
            reduce .[] as $item (
              {
                "total_seconds": 0,
                "files": {}
              };
              {
                "total_seconds": (.total_seconds + $item.total_seconds),
                "files": ( .files + $item.files | to_entries | 
                  group_by(.key) | 
                  map({
                    key: .[0].key, 
                    value: {
                      verifications: (reduce .[].value.verifications[] as $verification ([]; . + [$verification])),
                      newest: true
                    }
                  }) | from_entries)
              }
            )
          ' $JSON_FILES > ${{ steps.all-artifacts.outputs.artifacts-root }}/merge.json

      - name: Docs
        uses: competitive-verifier/actions/docs@v2
        with:
          verify-result: ${{ steps.all-artifacts.outputs.artifacts-root }}/merge.json
          destination: _jekyll
          write-summary: true

      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: _jekyll
          destination: _site
      - name: Upload artifact
        id: upload-pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Check
        uses: competitive-verifier/actions/check@v2
        with:
          verify-result: ${{ steps.all-artifacts.outputs.artifacts-root }}/merge.json

      - name: Upload cache result
        uses: actions/upload-artifact@v4
        with:
          name: Result-cache
          path: ${{ steps.all-artifacts.outputs.artifacts-root }}/merge.json
          retention-days: 90

  deploy:
    if: (success() || failure()) && github.ref == 'refs/heads/main' && needs.docs-and-check.outputs.upload-pages == 'true'
    needs: docs-and-check
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4